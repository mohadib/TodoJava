<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:property-placeholder location="WEB-INF/application.properties"/>

    <context:component-scan base-package="org.openactive.Todo">
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
        <!-- this makes intellij happy, it was seeing my spring config in a test and thought I had the same bean configured twice -->
        <context:exclude-filter expression="org.springframework.context.annotation.Configuration" type="annotation"/>
    </context:component-scan>

    <!-- Simple implementation of the standard JDBC DataSource interface,
   configuring the plain old JDBC DriverManager via bean properties -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jpa.driver}" />
        <property name="url" value="${jpa.url}" />
        <property name="username" value="${jpa.username}" />
        <property name="password" value="${jpa.password}" />
    </bean>

    <!-- This produces a container-managed EntityManagerFactory;
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- This makes /META-INF/persistence.xml is no longer necessary -->
        <property name="packagesToScan" value="org.openactive.Todo.domain" />
        <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
             Exposes Hibernate's persistence provider and EntityManager extension interface -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">${jpa.hbm2ddl.auto}</prop>
                <prop key="hibernate.dialect">${jpa.dialect}</prop>
                <prop key="hibernate.show_sql">${jpa.show_sql}</prop>
            </props>
        </property>
    </bean>

    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access.
      JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management;
         such as when @Transactional methods are invoked -->
    <tx:annotation-driven />

    <jpa:repositories base-package="org.openactive.Todo.dao" />

    <task:scheduler id="myScheduler" />
    <task:annotation-driven scheduler="myScheduler"/>

    <import resource="securityContext.xml"/>

</beans>
